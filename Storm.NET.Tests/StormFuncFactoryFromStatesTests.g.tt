<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Storm.NET - Simple Topologically Ordered Reactive Model
// Copyright © 2019 Storm.NET. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
<#
    var ordinals = new[]
    {
        string.Empty,
        "First", "Second", "Third", "Fourth",
        "Fifth", "Sixth", "Seventh", "Eighth"
    };

    var cardinals = new[]
    {
        "Zero",
        "One", "Two", "Three", "Four",
        "Five", "Six", "Seven", "Eight"
    };

    var overloads =
        from argCount in Enumerable.Range(1, 8)
        from args in new[]
        {
            from argIndex in Enumerable.Range(0, argCount)
            select new
            {
                name = ordinals[argIndex + 1].ToLower()
            }
        }
        select new
        {
            argCount,
            Arguments = args.ToList(),
            FuncParameters = string.Join(", ", args.Select(a => $"StormFuncInput<int> {a.name}Input")),
            CreateParams = string.Join(", ", args.Select(a => a.name)),
        };
#>

namespace StormDotNet.Tests
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class StormFuncFactoryFromStatesTests
    {
<#  foreach (var o in overloads) { #>
        [Test]
        public void FuncWith<#= o.argCount#>InputReturnsAValue()
        {
<#  foreach (var a in o.Arguments) { #>
            var <#= a.name #> = Storm.Immutable.CreateValue(0);
<#  } #>

            static int Func(<#= o.FuncParameters #>)
            {
                return 42;
            }

            var result = Storm.Func.FromStates.Create(<#= o.CreateParams #>, Func);
            Assert.That(result.GetValueOrThrow(), Is.EqualTo(42));
        }

        [Test]
        public void FuncWith<#= o.argCount#>InputThrowAStormError()
        {
<#  foreach (var a in o.Arguments) { #>
            var <#= a.name #> = Storm.Immutable.CreateValue(0);
<#  } #>

            static int Func(<#= o.FuncParameters #>)
            {
                throw Storm.Error.EmptyContent;
            }

            var result = Storm.Func.FromStates.Create(<#= o.CreateParams #>, Func);
            Assert.That(result.TryGetError(out var error), Is.True);
            Assert.That(error, Is.EqualTo(Storm.Error.EmptyContent));
        }

        [Test]
        public void FuncWith<#= o.argCount#>InputThrowAnException()
        {
<#  foreach (var a in o.Arguments) { #>
            var <#= a.name #> = Storm.Immutable.CreateValue(0);
<#  } #>

            static int Func(<#= o.FuncParameters #>)
            {
                throw new Exception();
            }

            var result = Storm.Func.FromStates.Create(<#= o.CreateParams #>, Func);
            Assert.That(result.TryGetError(out var error), Is.True);
            Assert.That(error, Is.TypeOf<StormError>());
            Assert.That(error.InnerException, Is.TypeOf<Exception>());
        }

<#  } #>
    }
}