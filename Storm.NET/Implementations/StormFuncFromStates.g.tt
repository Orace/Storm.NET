<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Storm.NET - Simple Topologically Ordered Reactive Model
// Copyright © 2019 Storm.NET. All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
<#
    var ordinals = new[]
    {
        string.Empty,
        "First", "Second", "Third", "Fourth",
        "Fifth", "Sixth", "Seventh", "Eighth"
    };

    var cardinals = new[]
    {
        "zero",
        "one", "two", "three", "four",
        "five", "six", "seven", "eight"
    };

    var overloads =
        from argCount in Enumerable.Range(1, 8)
        from args in new[]
        {
            from argIndex in Enumerable.Range(0, argCount)
            select new
            {
                Index      = argIndex,
                IsLast     = (argIndex == argCount - 1),
                Name       = ordinals[argIndex + 1],
                name       = ordinals[argIndex + 1].ToLower(),
                Type       = $"T{ordinals[argIndex + 1]}",
            }
        }
        select new
        {
            Arguments = args.ToList(),
            cardinal = cardinals[argCount],
            TParams = string.Join(", ", from arg in args select arg.Type),
            InputTParams = string.Join(", ", from arg in args select $"StormFuncInput<{arg.Type}>")
        };
#>

namespace StormDotNet.Implementations
{
    using System;
    using System.Collections.Generic;

<#  foreach (var o in overloads) { #>
    internal class StormFuncFromStates<<#= o.TParams #>, TResult>
                 : StormFuncBase<<#= o.TParams #>, TResult>
    {
        private readonly Func<<#= o.InputTParams #>, TResult> _func;

        public StormFuncFromStates(
<#  foreach (var a in o.Arguments) { #>
            IStorm<<#= a.Type #>> <#= a.name #>,
<#  } #>
            Func<<#= o.InputTParams #>, TResult> func,
            IEqualityComparer<TResult> comparer) : base(<# foreach (var a in o.Arguments) { #><#= a.name #>, <# } #>comparer)
        {
            _func = func;
            Update();
        }

        protected sealed override bool Update()
        {
            try
            {
<#  foreach (var a in o.Arguments) { #>
                var <#= a.name #>State = new StormFuncInput<<#= a.Type #>>(<#= a.Name #>, GetState(<#= a.Index #>));
<#  } #>

                return SetValue(_func(<# foreach (var a in o.Arguments) { #><#= a.name #>State<#= a.IsLast ? ")" : ", " #><# } #>);
            }
            catch (StormError e)
            {
                return SetError(e);
            }
            catch (Exception e)
            {
                return SetError(Error.Func.Evaluation(e));
            }
        }
    }

<#  } #>
}